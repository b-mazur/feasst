{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "agricultural-poultry",
   "metadata": {},
   "source": [
    "# Simulation of a single freely-jointed chain of 10,000 monomers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "photographic-small",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# Usage: /home/user/feasst/build/bin/fst < file.txt\n",
      "FEASST version 0.25.13\n",
      "MonteCarlo\n",
      "Configuration cubic_side_length=30000 particle_type=chain:chain.txt.swp\n",
      "Potential Model=IdealGas\n",
      "ThermoParams beta=1 chemical_potential=1\n",
      "Metropolis\n",
      "TrialAdd particle_type=chain\n",
      "Run until_num_particles=1\n",
      "# Initializing random number generator with seed: 1748975657\n",
      "Remove name=TrialAdd\n",
      "TrialGrowFile grow_file=grow_chain.txt.swp\n",
      "Log output_file=chain.csv trials_per_write=1\n",
      "Movie output_file=chain.xyz trials_per_write=1\n",
      "EndToEndDistance output_file=end_to_end.txt\n",
      "RadiusOfGyration output_file=rg0.txt\n",
      "Run num_trials=1e2\n",
      " \n",
      " exit: 0\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "params = {\"num_monomers\": 10000}\n",
    "params[\"length\"] = 3*params[\"num_monomers\"]\n",
    "\n",
    "script=\"\"\"\n",
    "MonteCarlo\n",
    "Configuration cubic_side_length={length} particle_type=chain:chain.txt.swp\n",
    "Potential Model=IdealGas\n",
    "ThermoParams beta=1 chemical_potential=1\n",
    "Metropolis\n",
    "TrialAdd particle_type=chain\n",
    "Run until_num_particles=1\n",
    "Remove name=TrialAdd\n",
    "TrialGrowFile grow_file=grow_chain.txt.swp\n",
    "Let [write]=trials_per_write=1 output_file=chain\n",
    "Log [write].csv\n",
    "Movie [write].xyz\n",
    "EndToEndDistance output_file=end_to_end.txt\n",
    "RadiusOfGyration output_file=rg0.txt\n",
    "Run num_trials=1e2\n",
    "\"\"\".format(**params)\n",
    "\n",
    "def linear_single_site(n, filename):\n",
    "    # write fstprt file\n",
    "    with open (filename, \"w\") as f:\n",
    "        f.write(\n",
    "\"# FEASST particle file\\n\\\n",
    "\\n\\\n",
    "Site Properties\\n\\\n",
    "\\n\\\n",
    "0 epsilon 1 sigma 1.0 cutoff 3.0\\n\\\n",
    "\\n\\\n",
    "Bond Properties\\n\\\n",
    "\\n\\\n",
    "0 RigidBond length 1.0 delta 0.00001\\n\\\n",
    "\\n\\\n",
    "Sites\\n\\\n",
    "\\n\\\n",
    "\")\n",
    "\n",
    "        for i in range(n):\n",
    "            f.write(str(i) + \" 0 \" + str(i) + \".0 0.0 0.0\\n\")\n",
    "        f.write(\"\\nBonds\\n\\n\")\n",
    "        for i in range(n - 1):\n",
    "            f.write(str(i) + \" 0 \" + str(i) + \" \" + str(i + 1) + \"\\n\")\n",
    "        f.write(\"\\n\")\n",
    "\n",
    "    # write TrialGrowFile\n",
    "    with open('grow_' + filename, 'w') as f:\n",
    "        f.write(\"TrialGrowFile\\n\\nparticle_type chain regrow true site 0\\n\")\n",
    "        for i in range(1, n):\n",
    "            f.write(\"bond true mobile_site \"+str(i)+\" anchor_site \"+str(i-1)+\"\\n\")\n",
    "\n",
    "linear_single_site(params[\"num_monomers\"], \"chain.txt.swp\")\n",
    "\n",
    "with open('script0.txt', 'w') as file: file.write(script)\n",
    "import subprocess\n",
    "syscode = subprocess.call(\"../../../build/bin/fst < script0.txt > script0.log\", shell=True, executable='/bin/bash')\n",
    "with open('script0.log', 'r') as file: print(file.read(), '\\n', 'exit:', syscode)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "sublime-extent",
   "metadata": {},
   "outputs": [],
   "source": [
    "end_to_end=pd.read_csv('end_to_end.txt')\n",
    "assert np.abs(end_to_end['average'][0] - math.sqrt(params['num_monomers'])) < 20\n",
    "rg=pd.read_csv('rg0.txt')\n",
    "assert np.abs(rg['average'][0] - np.sqrt(params['num_monomers']/6)) < 200"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "postal-valentine",
   "metadata": {},
   "source": [
    "Did this tutorial work as expected? Did you find any inconsistencies or have any comments? Please [contact](../../../CONTACT.rst) us. Any feedback is appreciated!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
